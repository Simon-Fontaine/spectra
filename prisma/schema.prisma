generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  PLAYER
  COACH
  ADMIN
}

enum Specialty {
  MAIN_TANK
  OFF_TANK
  FLEX_DPS
  HITSCAN_DPS
  MAIN_HEAL
  FLEX_HEAL
}

model User {
  id              String         @id @default(uuid())
  username        String         @unique
  email           String         @unique
  password        String
  roles           Role[]         @default([USER])
  displayName     String?
  avatarUrl       String?
  isEmailVerified Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  // Overwatch specific fields
  battletag       String?
  specialty       Specialty      @default(MAIN_TANK)
  isSubstitute    Boolean        @default(false)
  // Relations
  sessions        Session[]
  verifications   Verification[]
  invitations     Invitation[]
}

model Session {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  csrfSecret String?
  ipAddress  String?
  location   String?
  device     String?
  userAgent  String?
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  ACCOUNT_DELETION
  EMAIL_CHANGE
}

model Verification {
  id        String           @id @default(uuid())
  userId    String
  token     String           @unique
  type      VerificationType
  newEmail  String?          @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invitation {
  id        String    @id @default(uuid())
  email     String    @unique
  inviterId String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  inviter User @relation(fields: [inviterId], references: [id], onDelete: Cascade)
}
